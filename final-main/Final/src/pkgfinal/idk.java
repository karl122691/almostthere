/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pkgfinal;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class idk extends javax.swing.JFrame {

    /**
     * Creates new form idk
     */
    public idk() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable1 = new javax.swing.JTable();
        add = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        calculate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtable2 = new javax.swing.JTable();
        calculate1 = new javax.swing.JButton();
        reset1 = new javax.swing.JButton();
        delete1 = new javax.swing.JButton();
        add1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtable3 = new javax.swing.JTable();
        calculate2 = new javax.swing.JButton();
        reset2 = new javax.swing.JButton();
        delete2 = new javax.swing.JButton();
        add2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        resources = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Population", "Standard quota", "LQ", "Extra resources", "Final apportionment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtable1);
        if (jtable1.getColumnModel().getColumnCount() > 0) {
            jtable1.getColumnModel().getColumn(0).setResizable(false);
            jtable1.getColumnModel().getColumn(1).setResizable(false);
            jtable1.getColumnModel().getColumn(2).setResizable(false);
            jtable1.getColumnModel().getColumn(3).setResizable(false);
            jtable1.getColumnModel().getColumn(4).setResizable(false);
            jtable1.getColumnModel().getColumn(4).setHeaderValue("Extra resources");
            jtable1.getColumnModel().getColumn(5).setResizable(false);
        }

        add.setText("Add row");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        delete.setText("Delete row");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        calculate.setText("Calculate");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(add)
                    .addComponent(delete)
                    .addComponent(reset)
                    .addComponent(calculate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculate)))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Hamilton's method", jPanel1);

        jtable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Population", "Standard quota", "LQ", "Modified quota", "Final apportionment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jtable2);
        if (jtable2.getColumnModel().getColumnCount() > 0) {
            jtable2.getColumnModel().getColumn(0).setResizable(false);
            jtable2.getColumnModel().getColumn(1).setResizable(false);
            jtable2.getColumnModel().getColumn(2).setResizable(false);
            jtable2.getColumnModel().getColumn(3).setResizable(false);
            jtable2.getColumnModel().getColumn(4).setResizable(false);
            jtable2.getColumnModel().getColumn(5).setResizable(false);
        }

        calculate1.setText("Calculate");
        calculate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate1ActionPerformed(evt);
            }
        });

        reset1.setText("Reset");
        reset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset1ActionPerformed(evt);
            }
        });

        delete1.setText("Delete row");
        delete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete1ActionPerformed(evt);
            }
        });

        add1.setText("Add row");
        add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(add1)
                    .addComponent(delete1)
                    .addComponent(reset1)
                    .addComponent(calculate1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(add1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculate1)))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Jefferson's method", jPanel2);

        jtable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Population", "Standard quota", "UQ", "Modified quota", "Final apportionment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jtable3);
        if (jtable3.getColumnModel().getColumnCount() > 0) {
            jtable3.getColumnModel().getColumn(0).setResizable(false);
            jtable3.getColumnModel().getColumn(1).setResizable(false);
            jtable3.getColumnModel().getColumn(2).setResizable(false);
            jtable3.getColumnModel().getColumn(3).setResizable(false);
            jtable3.getColumnModel().getColumn(4).setResizable(false);
            jtable3.getColumnModel().getColumn(5).setResizable(false);
        }

        calculate2.setText("Calculate");
        calculate2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate2ActionPerformed(evt);
            }
        });

        reset2.setText("Reset");
        reset2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset2ActionPerformed(evt);
            }
        });

        delete2.setText("Delete row");
        delete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete2ActionPerformed(evt);
            }
        });

        add2.setText("Add row");
        add2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(add2)
                    .addComponent(delete2)
                    .addComponent(reset2)
                    .addComponent(calculate2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(add2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculate2)))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Adam's method", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 951, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Webster's method", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 951, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Huntington - Mill method", jPanel5);

        jLabel1.setText("Apportionment");

        jLabel2.setText("Total number of resources to be allocated:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resources)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resources, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
double divisor = 0;
    double standarddivisor = 0;
    String res;
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
        model.addRow(new Object[]{});
    }//GEN-LAST:event_addActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
        model.setRowCount(0);
        enablecomponents(jtable1, add, delete, calculate);
        resources.setText("");
    }//GEN-LAST:event_resetActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
        int selectedRow = jtable1.getSelectedRow();

// Check if a row is selected
        if (selectedRow != -1) {
            model.removeRow(selectedRow); // Remove the selected row
        } else {
            // If no row is selected, delete the last row
            int lastRow = jtable1.getRowCount() - 1;
            if (lastRow >= 0) {
                model.removeRow(lastRow);
            } else {
                JOptionPane.showMessageDialog(this, "The table is empty!");
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        // Disable buttons and table during calculation
        DefaultTableModel model = (DefaultTableModel) jtable1.getModel();
        disablecomponents(jtable1, add, delete, calculate);
        // Force commit any changes in the 'resources' text field before calculation
        if (resources != null) {
            resources.transferFocus(); // Forces the text field to commit the value
        }

        // Validate and parse the 'resources' value
        double totres = parseAndValidateResources();
        if (totres == -1) {
            // If parsing failed, return early and don't proceed with calculation
            enablecomponents(jtable1, add, delete, calculate); // Re-enable components
            return;
        }

        double total = performtotal(jtable1, 1); // Call the method to get the total

        divisor = total / totres;
        // Iterate through each row to calculate and update the Standard Quota column

        updateStandardQuota(jtable1, divisor, 2);
        updateLQ(jtable1, 2, 3);
        double totstand = performtotal(jtable1, 2);
        double totLQ = performtotal(jtable1, 3);
        double extra = totres - totLQ;
        distributeExtraSeats(model, extra);
        hamiltonapportion(model);

        model.addRow(new Object[]{"TOTAL", total, totstand, totLQ, extra, totres}); // Add the total row

    }//GEN-LAST:event_calculateActionPerformed

    private void calculate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate1ActionPerformed
        // Disable buttons and table during calculation
        DefaultTableModel model = (DefaultTableModel) jtable2.getModel();
        disablecomponents(jtable2, add1, delete1, calculate1);
        // Force commit any changes in the 'resources' text field before calculation
        if (resources != null) {
            resources.transferFocus(); // Forces the text field to commit the value
        }

        // Validate and parse the 'resources' value
        double totres = parseAndValidateResources();
        if (totres == -1) {
            // If parsing failed, return early and don't proceed with calculation
            enablecomponents(jtable2, add1, delete1, calculate1); // Re-enable components
            return;
        }

        double total = performtotal(jtable2, 1); // Call the method to get the total

        divisor = total / totres;

        updateStandardQuota(jtable2, divisor, 2);
        updateLQ(jtable2, 2, 3);
        double totstand = performtotal(jtable2, 2);
        double totLQ = performtotal(jtable2, 3);
        if (totLQ == totres) {
            model.addRow(new Object[]{"TOTAL", total, totstand, totLQ, totstand, totLQ}); // Add the total row
        } else {
            double totmod = 0;
            double totmodLQ = 0;
            double goalLQ = totres;
            do {
                divisor = total / (totres + .005);
                totres = totres + .005;
                updateStandardQuota(jtable2, divisor, 4);
                updateLQ(jtable2, 4, 5);
                totmod = performtotal(jtable2, 4);
                totmodLQ = performtotal(jtable2, 5);;
            } while (totmodLQ != goalLQ);
            model.addRow(new Object[]{"TOTAL", total, totstand, totLQ, totmod, totmodLQ}); // Add the total row

        }
    }//GEN-LAST:event_calculate1ActionPerformed

    private void reset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable2.getModel();
        model.setRowCount(0);
        enablecomponents(jtable2, add1, delete1, calculate1);
        resources.setText("");
    }//GEN-LAST:event_reset1ActionPerformed

    private void delete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable2.getModel();
        int selectedRow = jtable2.getSelectedRow();

// Check if a row is selected
        if (selectedRow != -1) {
            model.removeRow(selectedRow); // Remove the selected row
        } else {
            // If no row is selected, delete the last row
            int lastRow = jtable2.getRowCount() - 1;
            if (lastRow >= 0) {
                model.removeRow(lastRow);
            } else {
                JOptionPane.showMessageDialog(this, "The table is empty!");
            }
        }
    }//GEN-LAST:event_delete1ActionPerformed

    private void add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable2.getModel();
        model.addRow(new Object[]{});
    }//GEN-LAST:event_add1ActionPerformed

    private void calculate2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate2ActionPerformed
        // Disable buttons and table during calculation
        DefaultTableModel model = (DefaultTableModel) jtable3.getModel();
        disablecomponents(jtable3, add2, delete2, calculate2);
        // Force commit any changes in the 'resources' text field before calculation
        if (resources != null) {
            resources.transferFocus(); // Forces the text field to commit the value
        }

        // Validate and parse the 'resources' value
        double totres = parseAndValidateResources();
        if (totres == -1) {
            // If parsing failed, return early and don't proceed with calculation
            enablecomponents(jtable3, add2, delete2, calculate2); // Re-enable components
            return;
        }

        double total = performtotal(jtable3, 1); // Call the method to get the total

        divisor = total / totres;

        updateStandardQuota(jtable3, divisor, 2);
        updateUQ(jtable3, 2, 3);
        double totstand = performtotal(jtable3, 2);
        double totUQ = performtotal(jtable3, 3);
        if (totUQ == totres) {
            model.addRow(new Object[]{"TOTAL", total, totstand, totUQ, totstand, totUQ, totres}); // Add the total row
        } else {
            double totmod = 0;
            double totmodUQ = 0;
            double goalUQ = totres;
            do {
                divisor = total / (totres - .005);
                totres = totres - .005;
                updateStandardQuota(jtable3, divisor, 4);
                updateUQ(jtable3, 4, 5);
                totmod = performtotal(jtable3, 4);
                totmodUQ = performtotal(jtable3, 5);;
            } while (totmodUQ != goalUQ);
            model.addRow(new Object[]{"TOTAL", total, totstand, totUQ, totmod, totmodUQ}); // Add the total row

        }
    }//GEN-LAST:event_calculate2ActionPerformed

    private void reset2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset2ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable3.getModel();
        model.setRowCount(0);
        enablecomponents(jtable3, add2, delete2, calculate2);
        resources.setText("");
    }//GEN-LAST:event_reset2ActionPerformed

    private void delete2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete2ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable3.getModel();
        int selectedRow = jtable3.getSelectedRow();

// Check if a row is selected
        if (selectedRow != -1) {
            model.removeRow(selectedRow); // Remove the selected row
        } else {
            // If no row is selected, delete the last row
            int lastRow = jtable3.getRowCount() - 1;
            if (lastRow >= 0) {
                model.removeRow(lastRow);
            } else {
                JOptionPane.showMessageDialog(this, "The table is empty!");
            }
        }
    }//GEN-LAST:event_delete2ActionPerformed

    private void add2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add2ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtable3.getModel();
        model.addRow(new Object[]{});
    }//GEN-LAST:event_add2ActionPerformed
    private double performtotal(JTable table, int columnIndex) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        // Force commit changes for the last row (if any editing is in progress)
        int lastRow = model.getRowCount() - 1;
        if (lastRow >= 0) {
            for (int col = 0; col < model.getColumnCount(); col++) {
                table.editCellAt(lastRow, col); // This uses the JTable for UI interaction
                if (table.getCellEditor() != null) {
                    table.getCellEditor().stopCellEditing();
                }
            }
        }

        BigDecimal columnTotal = BigDecimal.ZERO; // Initialize total as 0

        // Iterate over all rows to validate and sum the values in the specified column
        for (int row = 0; row < model.getRowCount(); row++) {
            Object cellValue = model.getValueAt(row, columnIndex); // Get value from the target column
            if (cellValue != null) {
                try {
                    BigDecimal numericValue = new BigDecimal(cellValue.toString()); // Convert to BigDecimal

                    // Validate that the value is >= 0
                    if (numericValue.compareTo(BigDecimal.ZERO) < 0) {
                        JOptionPane.showMessageDialog(null,
                                "Negative value found at row " + (row + 1) + ": " + numericValue,
                                "Invalid Input", JOptionPane.ERROR_MESSAGE);
                        return -1; // Signal an error
                    }

                    columnTotal = columnTotal.add(numericValue); // Add value to the total
                } catch (NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null,
                            "Non-numeric value found at row " + (row + 1) + ": " + cellValue,
                            "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    return -1; // Signal an error
                }
            } else {
                // Handle empty value (null)
                JOptionPane.showMessageDialog(null,
                        "Empty value at row " + (row + 1) + ". Please enter a valid number.",
                        "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return -1; // Signal an error
            }
        }

        // Return the total as a double, rounded to 2 decimal places
        return columnTotal.setScale(2, RoundingMode.HALF_UP).doubleValue();
    }

    private void disablecomponents(JTable table, JButton addButton, JButton deleteButton, JButton calculateButton) {
        addButton.setEnabled(false);
        deleteButton.setEnabled(false);
        table.setEnabled(false);
        calculateButton.setEnabled(false);
    }

    private void enablecomponents(JTable table, JButton addButton, JButton deleteButton, JButton calculateButton) {
        addButton.setEnabled(true);
        deleteButton.setEnabled(true);
        table.setEnabled(true);
        calculateButton.setEnabled(true);
    }

    private double parseAndValidateResources() {
        try {
            res = resources.getText().trim(); // Get and trim the text from 'resources'

            // Check if the input is empty
            if (res.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a value in the resources field.",
                        "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return -1; // Return -1 to signal an error
            }

            // Try to parse it to a double
            double totres = Double.parseDouble(res);

            // Check if the value is negative
            if (totres < 0) {
                JOptionPane.showMessageDialog(null, "Negative values are not allowed in the resources field.",
                        "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return -1; // Return -1 to signal an error
            }

            return totres; // Return the valid parsed value
        } catch (NumberFormatException e) {
            // Handle invalid number input
            JOptionPane.showMessageDialog(null, "Please enter a valid number in the resources field.",
                    "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return -1; // Return -1 to signal an error
        }
    }

    private void updateStandardQuota(JTable table, double divisor, int s) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            // Fetch the population from the table (assuming the value is already validated)
            Object populationValue = model.getValueAt(row, 1); // Population column (index 1)
            double population = Double.parseDouble(populationValue.toString());
            double standardQuota = population / divisor; // Standard Quota calculation
            BigDecimal roundedQuota = BigDecimal.valueOf(standardQuota).setScale(2, RoundingMode.HALF_UP);
            // Update the Standard Quota column (assuming it's at index 2)
            model.setValueAt(roundedQuota, row, s); // Set the value in the Standard Quota column
        }
    }

    private void updateLQ(JTable table, int g, int s) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            Object standardQuotaValue = model.getValueAt(row, g); // Standard Quota column (index 2)
            double standardQuota = Double.parseDouble(standardQuotaValue.toString());
            double lowerQuota = Math.floor(standardQuota); // Standard Quota calculation
            model.setValueAt(lowerQuota, row, s); // Set the value in the Lower Quota column (assuming it's index 3)
        }
    }

    private void updateUQ(JTable table, int g, int s) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            Object standardQuotaValue = model.getValueAt(row, g); // Standard Quota column (index 2)
            double standardQuota = Double.parseDouble(standardQuotaValue.toString());
            double upperQuota = Math.ceil(standardQuota); // Standard Quota calculation
            model.setValueAt(upperQuota, row, s); // Set the value in the Lower Quota column (assuming it's index 3)
        }
    }

    private void distributeExtraSeats(DefaultTableModel model, double extrares) {
        int rowCount = model.getRowCount();
        double[] remainders = new double[rowCount];
        int[] extraSeatDistribution = new int[rowCount];

        // Calculate remainders for each row
        for (int row = 0; row < rowCount; row++) {
            double standardQuota = Double.parseDouble(model.getValueAt(row, 2).toString());
            double lowerQuota = Math.floor(standardQuota);
            remainders[row] = standardQuota - lowerQuota;
        }

        // Distribute extra seats based on remainders
        while (extrares > 0) {
            int maxIndex = -1;
            double maxRemainder = -1;

            // Find the row with the maximum remainder
            for (int row = 0; row < rowCount; row++) {
                if (remainders[row] > maxRemainder) {
                    maxRemainder = remainders[row];
                    maxIndex = row;
                }
            }

            if (maxIndex >= 0) {
                extraSeatDistribution[maxIndex]++;
                remainders[maxIndex] = -1; // Mark as used
                extrares--;
            } else {
                break;
            }
        }

        // Update the "Extra Seats" column
        for (int row = 0; row < rowCount; row++) {
            model.setValueAt(extraSeatDistribution[row], row, 4); // Assuming column 4 is "Extra Seats"
        }
    }

    private void hamiltonapportion(DefaultTableModel model) {
        for (int row = 0; row < model.getRowCount(); row++) {

            Object LQ1 = model.getValueAt(row, 3);
            Object Extrar = model.getValueAt(row, 4);
            double LQ2 = Double.parseDouble(LQ1.toString());
            double Extrarr = Double.parseDouble(Extrar.toString());
            double Finalapp = LQ2 + Extrarr;

            model.setValueAt(Finalapp, row, 5); // Set the value in the Standard Quota column

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(idk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(idk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(idk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(idk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new idk().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton add1;
    private javax.swing.JButton add2;
    private javax.swing.JButton calculate;
    private javax.swing.JButton calculate1;
    private javax.swing.JButton calculate2;
    private javax.swing.JButton delete;
    private javax.swing.JButton delete1;
    private javax.swing.JButton delete2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jtable1;
    private javax.swing.JTable jtable2;
    private javax.swing.JTable jtable3;
    private javax.swing.JButton reset;
    private javax.swing.JButton reset1;
    private javax.swing.JButton reset2;
    private javax.swing.JTextField resources;
    // End of variables declaration//GEN-END:variables
}
